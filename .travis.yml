# avoid double builds on pull requests
branches:
  only:
    master

matrix:
  include:
    - stage: Check JSON format
      before_install: npm install -g json-align
      script:
        - find . -name "*.json" -print0 | xargs -0 json-align -i
        - diffs=$(git diff --name-only | wc -l); if [ $diffs != 0 ]; then exit 1; fi
      after_failure:
        - echo "Some JSON files are not aligned. Please run json-align."
        - git diff --name-only

    - stage: Update translations
      before_install:
        - sudo apt-get -qq update
        - sudo apt-get install -y python-jsonschema python-pil gettext
      script:
        - python ./validate.py
      after_success:
        # push translation updates only for master (PR changes must be committed to master before they are taken into account)
        - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then ./i18n/push_translations.sh; fi

    # Update JSDoc
    - stage: Update JSDoc
      before_install: npm install -g jsdoc
      script:
        # push JSDoc updates only for master (PR changes must be committed to master before they are taken into account)
        - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then ./push_jsdoc.sh; fi

    # Check GitHub Pages
    - stage: Check GitHub Pages
      os: linux
      language: ruby
      rvm:
        - 2.5
      before_install: cd docs
      script:
        - bundle exec jekyll build
        - bundle exec htmlproofer ./_site --only-4xx --check-favicon --check-html --assume-extension --file-ignore=/jsdoc/

env:
  global:
    - secure: "i9wQye4zinEe1wnsFcqqSgCOPpGOgS5BLGjE60KYhQYD4/OT0Y+cJDOluozbf8TsNabMW3Q6jDODNsfZHjbXFErxS7D7Vyi4s2B8ITrL9zhVizDE3GhN2GNUGl2JO954cNjhT53d+PaMAT3Muz+X3d4RiOS41GQh6xoisdZAzJTNa5p7ulwaNNlqRzlNNj5i4Otzcarp97u6BnDuVsm4UvviTeICjVbYUwBy5XOymzX2BDU/F9o9utH4xRBtW3Cx0lLJ6Qx1rZNDMgdEtvxgW6R+L3pI2pCqlDJTSXRFWv5+Tm5n1+knINAchHUT8i0djEMMtiLjDF1ouLYQNWK8OsRCoMAGIwSxA0Q0Rozjx1nXzMmqdivXSgh71YmUc8UQQYyli8egz5tDcft1p8jgUjC/LYXYVfvoZPF0idheMMfbzClRTdGzhJcaymnvbR0lPOnqhES9Rc8khGMDnN23I49q8XGJjBKuGwzXy4toqDHVXM42GFA36zo8tt+q5FfNozJsj+jxOc6VRjX385yntxxT8ibRhRBk73ueh12unIkA3nBujX1gnO+eNBSni7bDjV9Wqdpi+QaDvLro6XoB0weEvI9cYzcNyEyH582yrWbzjkF6dRAKijIlsrJ7JETYRnxM3qisu3O7O1ATSfzqJM9WXQnGzaHCoSdHp97Yl5Y="
